# 桥接模式

## 概念
桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。

## 类型

## 优点
1.抽象与实现分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，这有助于系统进行分层设计，从而产生更好的结构化系统
2.对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其他的部分有具体业务来完成
3.桥接模式提代了多层继承方案，可以减少子类的个数，降低系统的管理和维护成本

## 缺点

## 应用场景
1.当一个对象有多个变化因素的时候，考虑依赖于抽象的实现，而不是具体的实现。如手机品牌有2种变化因素，一个是品牌，一个是功能。
2.当考虑一个对象的多个变化因素可以动态变化的时候，考虑使用桥接模式，如手机的手机品牌是变化的，手机的功能也是变化的，所以将每个可变化的因数分离出来，独立的变化。
3.当多个变化因素在多个对象间共享时，考虑将变化的部分抽象出来再聚合或组合进来。

## 注意事项：
对于两个独立变化的维度，使用桥接模式再适合不过了。
以下是桥接模式的几个关键角色：
抽象（Abstraction）：定义抽象接口，通常包含对实现接口的引用。
扩展抽象（Refined Abstraction）：对抽象的扩展，可以是抽象类的子类或具体实现类。
实现（Implementor）：定义实现接口，提供基本操作的接口。
具体实现（Concrete Implementor）：实现实现接口的具体类。


## 我的理解：
当一个类的内部某个属性，具有多种变化维度（或者具有多个实现类），可以使用桥接模式解耦这些变化的维度。
该类的属性使用接口或者抽象类承接，使用具体实现类定义属性的类型；

组合优先于继承
