# 组合模式

## 概念
组合（Composite Pattern）模式的定义：有时又叫作整体-部分（Part-Whole）模式，它是一种将对象组合成树状的层次结构的模式，
用来表示“整体-部分”的关系，使用户对单个对象和组合对象具有一致的访问性，属于结构型设计模式。

组合模式一般用来描述整体与部分的关系，它将对象组织到树形结构中，顶层的节点被称为根节点，根节点下面可以包含树枝节点和叶子节点，
树枝节点下面又可以包含树枝节点和叶子节点，树形结构图如下。

## 组合模式的结构
抽象根节点：定义组合中各层次对象的共有行为和属性，可以预先定义一些默认行为和属性。
子节点：继承自抽象根节点，实现其对应的具体行为，定义子节点的行为和属性。
叶子节点：继承自根节点，实现其对应的具体行为，定义叶子节点的行为和属性。

## 优点
1.组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码；
2.更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，满足“开闭原则”；

## 缺点
设计较复杂，客户端需要花更多时间理清类之间的层次关系；
不容易限制容器中的构件；
不容易用继承的方法来增加构件的新功能；

## 透明组合模式：
透明组合模式，即抽象根节点角色中定义了所有用于管理成员对象的方法，比如上述类图中的 addNode、removeNode、getNode 等方法。
这样做的好处是确保所有构件都有相同的行为，透明组合模式也是组合模式的标准实现。其缺点是不够安全，因为叶子对象和容器对象在本质上是有区别的，
可能会出现叶子对象调用容器对象方法的运行错误。

## 安全组合模式：
安全组合模式，即抽象根节点角色中没有定义关于管理成员对象的任何方法，而是定义在了容器角色中，
这样做的好处是避免了叶子对象调用容器方法而出现的运行错误；缺点是不够透明，客户端不能完全针对抽象编程，必须区别对待叶子构件和容器构件。

## 组合模式的实现步骤：
组合模式的实现方式主要分为三步
定义一个接口，并在接口中定义要实现的功能
叶子节点实现这个接口，并重写接口中的方法
树枝节点中有一个集合或者数组，可以对接口对象进行管理。同时，树枝节点还要实现这个接口，在重写接口的方法时可以循环集合或数组得到接口对象，并对其进行调用